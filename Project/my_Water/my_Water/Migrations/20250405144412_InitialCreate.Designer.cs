// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace my_Water.Migrations
{
    [DbContext(typeof(UserDBContext))]
    [Migration("20250405144412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Forum", b =>
                {
                    b.Property<string>("forum_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("forum_content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("forum_topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("forum_id");

                    b.HasIndex("user_id");

                    b.ToTable("forums");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Img_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Message", b =>
                {
                    b.Property<string>("message_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("message_content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("msg_topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("rec_user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sender_email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("message_id");

                    b.HasIndex("user_id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Userid")
                        .HasColumnType("TEXT");

                    b.Property<string>("game_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Userid");

                    b.ToTable("UserGame");
                });

            modelBuilder.Entity("UserOrder", b =>
                {
                    b.Property<string>("user_order_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<double>("price")
                        .HasColumnType("REAL");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("user_order_id");

                    b.HasIndex("user_id");

                    b.ToTable("userOrders");
                });

            modelBuilder.Entity("WishGames", b =>
                {
                    b.Property<string>("WishGamesListId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("game_list")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WishGamesListId");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("wishGames");
                });

            modelBuilder.Entity("Forum", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany("ForumComments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Message", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany("Messages")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("UserGame", b =>
                {
                    b.HasOne("Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId");

                    b.HasOne("User", null)
                        .WithMany("UserGames")
                        .HasForeignKey("Userid");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("UserOrder", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany("user_orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("WishGames", b =>
                {
                    b.HasOne("User", "user")
                        .WithOne("wishGames")
                        .HasForeignKey("WishGames", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("ForumComments");

                    b.Navigation("Messages");

                    b.Navigation("UserGames");

                    b.Navigation("user_orders");

                    b.Navigation("wishGames")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
